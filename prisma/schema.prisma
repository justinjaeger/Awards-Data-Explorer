// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Some of the models are for compatibility with Next Auth: https://next-auth.js.org/adapters/prisma

// Specify which datasource prisma should connect to
datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// This is default for the time being
generator client {
    provider = "prisma-client-js"
}

/////////////////
// USER / AUTH //
/////////////////

model User {
    id              String      @id @default(cuid())
    email           String      @unique
    emailVerified   DateTime?
    name            String?
    username        String?     @unique
    password        String?
    role            Role        @default(USER)
    image           String      @default("/PROFILE.png")
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    lastLoggedIn    DateTime?
    accounts        Account[]
    sessions        Session[]
    followers       Follower[]  @relation("user")
    following       Follower[]  @relation("follower")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Follower {
    user            User        @relation("user", fields: [userId], references: [id])
    userId          String
    follower        User        @relation("follower", fields: [followerId], references: [id])
    followerId      String
    createdAt       DateTime    @default(now())
    
    @@id([userId, followerId])
}

enum Role {
  USER
  ADMIN
}

/////////////////////
// AWARDS DATABASE //
/////////////////////

model DB_Movie {
    id              String              @id @default(cuid())
    wikiUrl         String              @unique
    title           String      
    year            Int
    imdbUrl         String?
    nominations     DB_Nomination[]     @relation("movie-nomination")
}

model DB_Person {
    id              String              @id @default(cuid())
    wikiUrl         String              @unique
    name            String
    nominations     DB_Nomination[]     @relation("person-nomination")
}

model DB_Nomination {
    id              String          @id @default(cuid())
    winner          Boolean         @default(false)
    person          DB_Person       @relation("person-nomination", fields: [personId], references: [id])
    personId        String
    movie           DB_Movie        @relation("movie-nomination", fields: [movieId], references: [id])
    movieId         String
}

model DB_AwardsBody {
    id         String           @id @default(cuid())
    name       String   
    awards     DB_Award[]       @relation("awardsbody-award")
}

model DB_AwardsCategory {
    id         String           @id @default(cuid())
    name       String    
    awards     DB_Award[]       @relation("awardscategory-award")
}

model DB_Award {
    id                String             @id @default(cuid())
    year              String  
    awardsBody        DB_AwardsBody      @relation("awardsbody-award", fields: [awardsBodyId], references: [id])  
    awardsBodyId      String
    awardsCategory    DB_AwardsCategory  @relation("awardscategory-award", fields: [awardsCategoryId], references: [id])  
    awardsCategoryId  String
}
